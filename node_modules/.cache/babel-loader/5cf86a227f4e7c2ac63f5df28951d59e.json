{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Desktop\\\\Tabela-Cyber-Pleno\\\\src\\\\contexts\\\\FormContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//Context, Reducer (cara que executa ações específicas), Provider (ambiente dos dados do contexto), Hook (simplifica o processo ao acesso das informações)\nimport { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  // initial dada recebe o type State\n  currentStep: 0,\n  name: '',\n  level: 0,\n  email: '',\n  github: ''\n};\n//Context \nconst FormContext = /*#__PURE__*/createContext(undefined); //meu Contexto começa ou com undefined ou com meu ContextType\n\n//Reducer\nexport let FormActions;\n(function (FormActions) {\n  FormActions[FormActions[\"setCurrentStep\"] = 0] = \"setCurrentStep\";\n  FormActions[FormActions[\"setName\"] = 1] = \"setName\";\n  FormActions[FormActions[\"setLevel\"] = 2] = \"setLevel\";\n  FormActions[FormActions[\"setEmail\"] = 3] = \"setEmail\";\n  FormActions[FormActions[\"setGithub\"] = 4] = \"setGithub\";\n})(FormActions || (FormActions = {}));\nconst formReducer = (state, action) => {\n  //funcao que recebe: state (dados) e action (acao que executa nossos dados). state: State (State informa o type dos meus dados)\n  switch (action.type) {\n    //precisam de tipagem - switch - ver qual é a ação necessária (tipo)\n    case FormActions.setCurrentStep:\n      //case é um tipo de ação que evoca o enum {} e linka com uma ação ()\n      return {\n        ...state,\n        currentStep: action.payLoad //payload: dados \n      };\n    // a func. formReducer recebe os dados com state, executa a ação de trocar o passo atual (FormActions.setCurrentStep)\n    //pega o passo atual com action.payload, troca no currentStep e retorna um NOVO STATE (...state) com o currentStep modificado pelo switch\n    case FormActions.setName:\n      return {\n        ...state,\n        name: action.payLoad //payload: dados \n      };\n\n    case FormActions.setLevel:\n      return {\n        ...state,\n        level: action.payLoad //payload: dados \n      };\n\n    case FormActions.setEmail:\n      return {\n        ...state,\n        email: action.payLoad //payload: dados \n      };\n\n    case FormActions.setGithub:\n      return {\n        ...state,\n        github: action.payLoad //payload: dados \n      };\n\n    default:\n      return state;\n  }\n};\n\n//Provider - ambiente geral p gerenciamento de dados global\n\nexport const FormProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //cpt principal da aplicação \n  const [state, dispatch] = useReducer(formReducer, initialData); //uso padrao de um reducer. state: dados e dispatch: função que executa minhas ações\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this) //cria o ambiente e coloca o site inteiro dentro do Provider\n  ;\n};\n\n// context hook\n_s(FormProvider, \"V91aNRjY5B4p0Ob5EecXATatID0=\");\n_c = FormProvider;\nexport const useForm = () => {\n  _s2();\n  const context = useContext(FormContext);\n  if (context === undefined) {\n    //se sim, significa que estou usando um componente fora do Provider\n    throw new Error('useForm tem que ser usado dentro do FormProvider');\n  }\n  return context;\n};\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","initialData","currentStep","name","level","email","github","FormContext","undefined","FormActions","formReducer","state","action","type","setCurrentStep","payLoad","setName","setLevel","setEmail","setGithub","FormProvider","children","dispatch","value","useForm","context","Error"],"sources":["C:/Users/gabri/Desktop/Tabela-Cyber-Pleno/src/contexts/FormContext.tsx"],"sourcesContent":["//Context, Reducer (cara que executa ações específicas), Provider (ambiente dos dados do contexto), Hook (simplifica o processo ao acesso das informações)\r\nimport {createContext, ReactNode, useContext, useReducer} from 'react';\r\n\r\ntype State = {                              // type dos dados armazenados (logo, state: State)\r\n    currentStep: number;\r\n    name: string;\r\n    level: 0 | 1;\r\n    email: string;\r\n    github: string;\r\n}                            \r\n\r\ntype Action = {\r\n    type: FormActions;      //meu formAction (apenas as opções do meu enum)\r\n    payLoad: any;           // usamos any pra tipar o payload porque meus dados podem vir de qualquer coisa\r\n}\r\n\r\ntype ContextType = {         //vamos usar no meu createContext\r\n    state: State;\r\n    dispatch: (action: Action)=> void; // tipamos a função dispatch e declaramos que ela n retorna nada por padrão\r\n}\r\n\r\ntype FormProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\n\r\nconst initialData: State = {               // initial dada recebe o type State\r\n    currentStep: 0,\r\n    name: '',\r\n    level: 0,\r\n    email: '',\r\n    github: ''\r\n\r\n}\r\n//Context \r\nconst FormContext = createContext<ContextType | undefined>(undefined); //meu Contexto começa ou com undefined ou com meu ContextType\r\n\r\n//Reducer\r\nexport enum FormActions{ //Enums são uma funcionalidade adicionada ao JavaScript pelo TypeScript na qual facilita o manuseio de grupos de constantes nomeadas. Por padrão um enum é baseado em números, começando no zero, e para cada opção é assinalado um número incrementado por um. Isso é útil quando o valor em si não importa.\r\n    setCurrentStep,\r\n    setName,\r\n    setLevel,\r\n    setEmail,\r\n    setGithub,\r\n}\r\nconst formReducer = (state: State, action: Action)=>{ //funcao que recebe: state (dados) e action (acao que executa nossos dados). state: State (State informa o type dos meus dados)\r\n    switch(action.type){               //precisam de tipagem - switch - ver qual é a ação necessária (tipo)\r\n        case FormActions.setCurrentStep: //case é um tipo de ação que evoca o enum {} e linka com uma ação ()\r\n            return{\r\n                ...state, currentStep: action.payLoad   //payload: dados \r\n            }; // a func. formReducer recebe os dados com state, executa a ação de trocar o passo atual (FormActions.setCurrentStep)\r\n            //pega o passo atual com action.payload, troca no currentStep e retorna um NOVO STATE (...state) com o currentStep modificado pelo switch\r\n        case FormActions.setName: \r\n            return{\r\n                ...state, name: action.payLoad   //payload: dados \r\n            };\r\n        case FormActions.setLevel: \r\n            return{\r\n                ...state, level: action.payLoad   //payload: dados \r\n            };\r\n        case FormActions.setEmail: \r\n            return{\r\n                ...state, email: action.payLoad   //payload: dados \r\n            };\r\n        case FormActions.setGithub: \r\n            return{\r\n                ...state, github: action.payLoad   //payload: dados \r\n            };\r\n        default:\r\n            return state;\r\n    } \r\n};\r\n\r\n//Provider - ambiente geral p gerenciamento de dados global\r\n\r\nexport const FormProvider = ({children}: FormProviderProps)=>{  //cpt principal da aplicação \r\n    const [state, dispatch] = useReducer(formReducer, initialData); //uso padrao de um reducer. state: dados e dispatch: função que executa minhas ações\r\n    const value = {state, dispatch}; \r\n    return(\r\n        <FormContext.Provider value={value}>\r\n            {children}\r\n        </FormContext.Provider>  //cria o ambiente e coloca o site inteiro dentro do Provider\r\n    );\r\n}\r\n\r\n// context hook\r\n\r\nexport const useForm = ()=>{\r\n    const context = useContext(FormContext);\r\n    if (context === undefined){ //se sim, significa que estou usando um componente fora do Provider\r\n        throw new Error('useForm tem que ser usado dentro do FormProvider');\r\n    }\r\n    return context;\r\n}"],"mappings":";;;AAAA;AACA,SAAQA,aAAa,EAAaC,UAAU,EAAEC,UAAU,QAAO,OAAO;AAAC;AAyBvE,MAAMC,WAAkB,GAAG;EAAgB;EACvCC,WAAW,EAAE,CAAC;EACdC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AAEZ,CAAC;AACD;AACA,MAAMC,WAAW,gBAAGT,aAAa,CAA0BU,SAAS,CAAC,CAAC,CAAC;;AAEvE;AACA,WAAYC,WAAW;AAMtB,WANWA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;AAAA,GAAXA,WAAW,KAAXA,WAAW;AAOvB,MAAMC,WAAW,GAAG,CAACC,KAAY,EAAEC,MAAc,KAAG;EAAE;EAClD,QAAOA,MAAM,CAACC,IAAI;IAAiB;IAC/B,KAAKJ,WAAW,CAACK,cAAc;MAAE;MAC7B,OAAM;QACF,GAAGH,KAAK;QAAET,WAAW,EAAEU,MAAM,CAACG,OAAO,CAAG;MAC5C,CAAC;IAAE;IACH;IACJ,KAAKN,WAAW,CAACO,OAAO;MACpB,OAAM;QACF,GAAGL,KAAK;QAAER,IAAI,EAAES,MAAM,CAACG,OAAO,CAAG;MACrC,CAAC;;IACL,KAAKN,WAAW,CAACQ,QAAQ;MACrB,OAAM;QACF,GAAGN,KAAK;QAAEP,KAAK,EAAEQ,MAAM,CAACG,OAAO,CAAG;MACtC,CAAC;;IACL,KAAKN,WAAW,CAACS,QAAQ;MACrB,OAAM;QACF,GAAGP,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACG,OAAO,CAAG;MACtC,CAAC;;IACL,KAAKN,WAAW,CAACU,SAAS;MACtB,OAAM;QACF,GAAGR,KAAK;QAAEL,MAAM,EAAEM,MAAM,CAACG,OAAO,CAAG;MACvC,CAAC;;IACL;MACI,OAAOJ,KAAK;EAAC;AAEzB,CAAC;;AAED;;AAEA,OAAO,MAAMS,YAAY,GAAG,QAAiC;EAAA;EAAA,IAAhC;IAACC;EAA2B,CAAC;EAAM;EAC5D,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAGtB,UAAU,CAACU,WAAW,EAAET,WAAW,CAAC,CAAC,CAAC;EAChE,MAAMsB,KAAK,GAAG;IAACZ,KAAK;IAAEW;EAAQ,CAAC;EAC/B,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEC,KAAM;IAAA,UAC9BF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU,CAAE;EAAA;AAEjC,CAAC;;AAED;AAAA,GAVaD,YAAY;AAAA,KAAZA,YAAY;AAYzB,OAAO,MAAMI,OAAO,GAAG,MAAI;EAAA;EACvB,MAAMC,OAAO,GAAG1B,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAIkB,OAAO,KAAKjB,SAAS,EAAC;IAAE;IACxB,MAAM,IAAIkB,KAAK,CAAC,kDAAkD,CAAC;EACvE;EACA,OAAOD,OAAO;AAClB,CAAC;AAAA,IANYD,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}